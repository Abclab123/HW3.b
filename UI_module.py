import streamlit as st
from abc import ABC, abstractmethod

# Streamlit App Class (Abstract)
class StorytellingAppBase(ABC):
    """
    Base class for the AI Storytelling App.

    Attributes:
        text_generator: The text generator used for generating text.
        image_generator: The image generator used for generating images.
        user_history: List to store the user's input history.

    Methods:
        create_text_to_display(text): Abstract method to create text to display.
        create_image_to_display(text, history): Abstract method to create image to display.
        run(): Method to run the AI Storytelling App.
    """

    def __init__(self, _text_generator=None, _image_generator=None):
        self.text_generator = _text_generator
        self.image_generator = _image_generator
        self.user_history = []  # User history list

        if self.text_generator is None or self.image_generator is None:
            raise Exception("Generator not provided")

    @abstractmethod
    def create_text_to_display(self, text):
        '''
        You can define this method to return whatever you want to display in the text area.
        '''
        pass

    @abstractmethod
    def create_image_to_display(self, text):
        '''
        You can define this method to return whatever you want to display in the image area.
        history : list
            List of user inputs.
        text : str  
            The text generated by the text generator.

        Streamlit image display format only supports the following types:
            image : numpy.ndarray, [numpy.ndarray], BytesIO, str, or [str]
            Monochrome image of shape (w,h) or (w,h,1) OR a color image of shape (w,h,3) 
            OR an RGBA image of shape (w,h,4) OR a URL to fetch the image from OR a path of a local image file OR an SVG XML string like <svg xmlns=...</svg> 
            OR a list of one of the above, to display multiple images.
        '''
        pass


    def run(self):
        """
        Method to run the AI Storytelling App.

        Displays a user input section where the user can enter a story prompt.
        Generates and displays text and image based on the user's input.
        Ends the session if the "END" button is clicked.
        """
        st.title('AI Storytelling App')

        # User input section
        user_input = st.text_area("Enter your story prompt:")
        generate_button = st.button('Generate Story')
        end_session = st.button('END')

        # Process user input
        if generate_button and user_input:
            self.user_history.append(user_input)  # Save user input to history
            # Generate and display text
            generated_text = self.create_text_to_display(user_input)
            st.write(generated_text)

            # Generate and display image
            image = self.create_image_to_display(generated_text)
            st.image(image, caption="Generated Image")

        # End the session
        if end_session:
            st.write("Session Ended. Refresh the page to start a new session.")
            self.user_history = []  # Clear history at the end of the session